'use client'

import { useState, useEffect } from 'react'
import { useAuth } from '@/context/AuthContext'
import { AuthApi } from '@/lib/services/authApi'

// –¢–∏–ø –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
interface ProfileData {
  birth_date?: string;
  first_name?: string;
  [key: string]: unknown;
}

export default function BirthdayNotification() {
  const { user } = useAuth()
  const [notification, setNotification] = useState<{
    show: boolean
    message: string
    userName: string
  } | null>(null)

  useEffect(() => {
    const checkBirthday = async () => {
      if (!user) return

      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ API
        const profileData = await AuthApi.profile() as ProfileData
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ profileData —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç birth_date
        if (profileData && typeof profileData === 'object' && profileData.birth_date) {
          const birthDate = new Date(profileData.birth_date)
          const today = new Date()
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–∞
          if (isNaN(birthDate.getTime())) {
            console.warn('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:', profileData.birth_date)
            return
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
          const isBirthdayToday = 
            birthDate.getDate() === today.getDate() && 
            birthDate.getMonth() === today.getMonth()
          
          if (isBirthdayToday) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
            const lastShown = localStorage.getItem('birthday-notification-shown')
            const todayString = today.toDateString()
            
            if (lastShown !== todayString) {
              const firstName = profileData.first_name || user.name?.split(' ')[0] || '–î–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
              
              setNotification({
                show: true,
                message: `üéâ –° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, ${firstName}! Yessenov University –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç –≤–∞—Å –∏ –∂–µ–ª–∞–µ—Ç —É—Å–ø–µ—Ö–æ–≤ –≤ —É—á–µ–±–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–µ–ª–µ–π!`,
                userName: firstName
              })
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è
              localStorage.setItem('birthday-notification-shown', todayString)
            }
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è:', error)
      }
    }

    checkBirthday()
  }, [user])

  const dismissNotification = () => {
    setNotification(null)
  }

  if (!notification?.show) {
    return null
  }

  return (
    <div className="fixed top-4 right-4 z-50 max-w-md">
      <div className="bg-gradient-to-r from-pink-500 to-purple-600 text-white rounded-2xl shadow-2xl p-6 animate-[slideIn_0.3s_ease-out]">
        <div className="flex items-start gap-4">
          <div className="w-12 h-12 rounded-full bg-white/20 flex items-center justify-center flex-shrink-0">
            <span className="text-2xl">üéÇ</span>
          </div>
          <div className="flex-1">
            <h3 className="font-bold text-lg mb-2">–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!</h3>
            <p className="text-sm opacity-90 leading-relaxed">
              {notification.message}
            </p>
          </div>
          <button
            onClick={dismissNotification}
            className="w-8 h-8 rounded-full bg-white/20 hover:bg-white/30 flex items-center justify-center transition-colors flex-shrink-0"
            aria-label="–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
          >
            ‚úï
          </button>
        </div>
        
        {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
        <div className="absolute top-2 right-2 text-2xl opacity-20">üéâ</div>
        <div className="absolute bottom-2 left-2 text-xl opacity-20"></div>
      </div>
      
      <style jsx global>{`
        @keyframes slideIn {
          from { 
            transform: translateX(100%); 
            opacity: 0; 
          }
          to { 
            transform: translateX(0); 
            opacity: 1; 
          }
        }
      `}</style>
    </div>
  )
}

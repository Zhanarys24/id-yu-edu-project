// –ù–æ–≤—ã–π —á–∏—Å—Ç—ã–π calendarService.ts —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ API

// –¢–∏–ø—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
export interface CalendarEvent {
  id?: string | number;
  title: string;
  start: string;
  end: string;
  color: string;
  place: string;
  isOnline: boolean;
  link?: string;
  participants: string[];
  description?: string;
  created_by?: string;
  updated_at?: string;
  created_at?: string;
}

// –¢–∏–ø—ã –¥–ª—è –≤–∞—à–µ–≥–æ API —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
export interface ExternalParticipant {
  id: number;
  full_name: string;
  work_phone: string | null;
}

export interface ExternalParticipantsResponse {
  count: number;
  size: number;
  next: string | null;
  previous: string | null;
  results: ExternalParticipant[];
}

// –¢–∏–ø –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
export interface PersonnelSimple {
  id: number;
  full_name: string;
  work_phone?: string;
}

// –¢–∏–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export interface CalendarUser {
  id: string | number;
  name: string;
  email: string;
  department: string;
}

// –¢–∏–ø—ã –¥–ª—è –∫–æ—Ä–ø—É—Å–æ–≤
export interface Campus {
  id: number;
  name: string;
}

// –¢–∏–ø—ã –¥–ª—è –º–µ—Å—Ç –≤—Å—Ç—Ä–µ—á
export interface MeetingRoom {
  id: number;
  name: string;
  campus: number;
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
interface MeetingData {
  title: string;
  date: string;
  time_start: string;
  time_end: string;
  campus: string;
  location: string;
  description?: string;
  participants?: string[];
  [key: string]: unknown;
}

interface SearchFields {
  campus: string;
  location: string;
  date: string;
  time_start: string;
  time_end: string;
  [key: string]: unknown;
}

interface UpdatedData {
  [key: string]: unknown;
}

interface Meeting {
  id: number;
  title: string;
  date: string;
  time_start: string;
  time_end: string;
  campus: string;
  location: string;
  description?: string;
  participants?: string[];
  start_time?: string;
  end_time?: string;
  guests?: string[];
  created_by?: string;
  updated_at?: string;
  created_at?: string;
  [key: string]: unknown;
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API
import { API_CONFIG, buildApiUrl, getApiHeaders } from '../config/api';

export const CalendarService = {
  // –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞—à API route (–±–µ–∑ CORS –ø—Ä–æ–±–ª–µ–º)
  getExternalParticipants: async (page: number = 1, pageSize: number = 100): Promise<ExternalParticipantsResponse> => {
    try {
      const url = `/api/calendar/personnel?page=${page}&size=${pageSize}`;
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ API route:', url);
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-store',
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data: ExternalParticipantsResponse = await response.json();
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${data.results.length} –∏–∑ ${data.count}`);
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π)
  getAllExternalParticipants: async (): Promise<ExternalParticipant[]> => {
    try {
      const allParticipants: ExternalParticipant[] = [];
      let page = 1;
      let hasMore = true;

      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');

      while (hasMore) {
        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}...`);
        const response = await CalendarService.getExternalParticipants(page, 100);
        allParticipants.push(...response.results);
        
        hasMore = response.next !== null;
        page++;
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if (page > 50) {
          console.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (50), –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
          break;
        }
      }

      // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ ID –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
      const uniqueParticipants = allParticipants.reduce((unique, participant) => {
        const exists = unique.some(p => p.id === participant.id);
        if (!exists) {
          unique.push(participant);
        }
        return unique;
      }, [] as ExternalParticipant[]);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
      const sortedParticipants = uniqueParticipants.sort((a, b) => {
        return a.full_name.localeCompare(b.full_name, 'ru', { 
          numeric: true, 
          sensitivity: 'base' 
        });
      });

      console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${sortedParticipants.length}`);
      return sortedParticipants;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
      throw error;
    }
  },

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ PersonnelSimple –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  transformExternalToPersonnel: (external: ExternalParticipant): PersonnelSimple => {
    return {
      id: external.id,
      full_name: external.full_name,
      work_phone: external.work_phone || undefined,
    };
  },

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É API
  testConnection: async (): Promise<{success: boolean, message: string, status?: number}> => {
    try {
      const url = `/api/calendar/personnel?page=1&size=5`;
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API route:', url);
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-store',
      });

      const responseText = await response.text();
      console.log('üì° –û—Ç–≤–µ—Ç API route:', {
        status: response.status,
        text: responseText.substring(0, 200) + (responseText.length > 200 ? '...' : '')
      });

      if (response.ok) {
        try {
          const data = JSON.parse(responseText);
          return {
            success: true,
            message: `‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${data.count || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
            status: response.status
          };
        } catch (parseError) {
          return {
            success: false,
            message: `‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON. –û—Ç–≤–µ—Ç: ${responseText.substring(0, 100)}...`,
            status: response.status
          };
        }
      } else {
        return {
          success: false,
          message: `‚ùå –û—à–∏–±–∫–∞ API: ${response.status} - ${responseText.substring(0, 100)}...`,
          status: response.status
        };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API route:', error);
      return {
        success: false,
        message: `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${(error as Error).message}`
      };
    }
  },

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  // –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã
  
  getAllMeetings: async (): Promise<Meeting[]> => {
    try {
      console.log(' –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ API...');
      
      const response = await fetch('/api/calendar/meetings', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-store',
      });

      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å—Ç—Ä–µ—á:', response.status);
        return [];
      }

      const data = await response.json();
      console.log('‚úÖ –í—Å—Ç—Ä–µ—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
      
      return data.results || data || [];
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å—Ç—Ä–µ—á:', error);
      return [];
    }
  },

  getUsers: async (): Promise<CalendarUser[]> => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API...');
      
      const response = await fetch('/api/calendar/users', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-store',
      });

      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', response.status);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data.length || 0);
      console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data);
      
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return [];
    }
  },

  getPersonnel: async (): Promise<PersonnelSimple[]> => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª –∏–∑ API...');
      
      const response = await fetch('/api/calendar/personnel', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-store',
      });

      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', response.status);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', data.length || 0);
      console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', data);
      
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', error);
      return [];
    }
  },

  getCampuses: async (): Promise<Campus[]> => {
    try {
      console.log('üè¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–ø—É—Å–∞...');
      const response = await fetch('/api/calendar/campuses', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const campuses = await response.json();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—Ä–ø—É—Å–æ–≤:', campuses.length);
      console.log('üìã –ö–æ—Ä–ø—É—Å–∞:', campuses);
      return campuses;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–ø—É—Å–æ–≤:', error);
      return [];
    }
  },

  getMeetingRooms: async (): Promise<MeetingRoom[]> => {
    console.log('‚ö†Ô∏è getMeetingRooms –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    return [];
  },

  getLocations: async (campusId?: number): Promise<Array<{id: number, name: string, campus_id: number}>> => {
    try {
      console.log(' –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á...', campusId ? `–¥–ª—è –∫–æ—Ä–ø—É—Å–∞ ${campusId}` : '–≤—Å–µ –º–µ—Å—Ç–∞');
      
      const url = campusId 
        ? `/api/calendar/meeting-rooms?campus=${campusId}`
        : '/api/calendar/meeting-rooms';
        
      console.log(' URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—Ç:', url);

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API –º–µ—Å—Ç:', response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è meetingRooms
      const meetingRooms: MeetingRoom[] = await response.json();
      console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á –∏–∑ API:', meetingRooms);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
      const locations = meetingRooms.map((room: MeetingRoom) => ({
        id: room.id,
        name: room.name,
        campus_id: room.campus
      }));
      
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ—Å—Ç –≤—Å—Ç—Ä–µ—á:', locations.length);
      console.log('üìã –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:', locations);
      return locations;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Å—Ç –≤—Å—Ç—Ä–µ—á:', error);
      return [];
    }
  },

  createMeeting: async (meetingData: MeetingData): Promise<Meeting> => {
    try {
      console.log('üìÖ –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á—É...');
      console.log('üìã –î–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:', meetingData);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const requiredFields = ['title', 'date', 'time_start', 'time_end', 'campus', 'location'];
      const missingFields = requiredFields.filter(field => !meetingData[field]);
      
      if (missingFields.length > 0) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`);
      }
      
      const response = await fetch('/api/calendar/create/meeting', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(meetingData),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', response.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ –í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', result);
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', error);
      throw error;
    }
  },

  transformMeetingToEvent: (meeting: Meeting): CalendarEvent => {
    console.log('‚ö†Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', meeting);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    let startDateTime: string;
    let endDateTime: string;
    
    if (meeting.start_time && meeting.end_time) {
      // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –≥–æ—Ç–æ–≤—ã–µ datetime –ø–æ–ª—è
      startDateTime = meeting.start_time;
      endDateTime = meeting.end_time;
    } else if (meeting.date && meeting.time_start && meeting.time_end) {
      // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è date, time_start, time_end
      startDateTime = `${meeting.date}T${meeting.time_start}`;
      endDateTime = `${meeting.date}T${meeting.time_end}`;
    } else {
      // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
      const today = new Date().toISOString().split('T')[0];
      startDateTime = `${today}T09:00:00`;
      endDateTime = `${today}T10:00:00`;
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –£–±–∏—Ä–∞–µ–º allDay –∏ extendedProps, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    return {
      id: meeting.id.toString(),
      title: meeting.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      start: startDateTime,
      end: endDateTime,
      color: '#3B82F6',
      place: meeting.location || '',
      isOnline: false,
      participants: meeting.participants || meeting.guests || [],
      description: meeting.description || '',
      created_by: meeting.created_by || 'unknown',
      updated_at: meeting.updated_at,
      created_at: meeting.created_at,
    };
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID
  updateMeeting: async (id: number, meetingData: MeetingData): Promise<Meeting> => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID:', id);
      console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', meetingData);
      
      const response = await fetch('/api/calendar/update/meeting', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id, ...meetingData }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', response.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ –í—Å—Ç—Ä–µ—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', result);
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', error);
      throw error;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  deleteMeeting: async (id: number): Promise<void> => {
    try {
      console.log('üîÑ –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', id);
      
      const response = await fetch(`/api/calendar/delete/meeting?id=${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', response.status);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      console.log('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –ø–æ–ª—è–º
  updateMeetingByFields: async (searchFields: SearchFields, updatedData: UpdatedData): Promise<Meeting> => {
    try {
      console.log(' –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –ø–æ–ª—è–º...');
      console.log('üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –ø–æ–ª—è:', searchFields);
      console.log(' –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updatedData);
      
      const response = await fetch('/api/calendar/update/meeting-by-fields', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ searchFields, updatedData }),
      });

      console.log('üì° Response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –ø–æ–ª—è–º:', response.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ –í—Å—Ç—Ä–µ—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –ø–æ–ª—è–º:', result);
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –ø–æ–ª—è–º:', error);
      throw error;
    }
  },
};
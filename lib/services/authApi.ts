export type LoginResponse = {
  id?: string;
  email?: string;
  name?: string;
  role?: string;
  position?: string;
  avatarUrl?: string;
  token?: string;
  [key: string]: any;
};

import { extractMessageFromBackend, mapErrorToFriendlyMessage } from '../utils/errorMessages';

// —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è URL –±–µ–∑ –¥–≤–æ–π–Ω—ã—Ö —Å–ª—ç—à–µ–π
const buildUrl = (path: string) => {
  const base = process.env.NEXT_PUBLIC_API_BASE_URL || '';
  return `${base.replace(/\/+$/, '')}/${path.replace(/^\/+/, '')}`;
};

export const AuthApi = {
  // üîë –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ TokenAuthentication
  login: async (username: string, password: string): Promise<LoginResponse> => {
    // Use Next.js auth proxy to ensure auth cookie is set for middleware
    const res = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password }),
      cache: 'no-store',
    });

    const contentType = res.headers.get('content-type') || '';
    const text = await res.text().catch(() => '');

    if (!res.ok) {
      let msg: string | undefined;
      try { msg = text ? extractMessageFromBackend(JSON.parse(text), res.status) : undefined } catch {}
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ–π—Å: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (res.status === 400 || res.status === 401 || res.status === 403) {
        throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      }
      throw new Error(msg || mapErrorToFriendlyMessage(text || `Login failed (${res.status})`, res.status));
    }
    if (!contentType.includes('application/json')) {
      throw new Error('–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
    }

    const data: LoginResponse = JSON.parse(text);

    // ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω (–∏–∑ proxy –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ access_token)
    if ((data as any).access_token) {
      localStorage.setItem('auth.token', String((data as any).access_token));
    } else if (data.token) {
      localStorage.setItem('auth.token', data.token);
    }

    return data;
  },

  // üîë –ü—Ä–æ—Ñ–∏–ª—å
  profile: async (): Promise<any> => {
    // Use Next.js proxy which authenticates via cookie set at login
    const res = await fetch('/api/auth/profile', { cache: 'no-store' });

    const text = await res.text().catch(() => '');
    if (!res.ok) {
      let msg: string | undefined;
      try { msg = text ? extractMessageFromBackend(JSON.parse(text), res.status) : undefined } catch {}
      throw new Error(msg || mapErrorToFriendlyMessage(text || `Profile failed (${res.status})`, res.status));
    }

    return JSON.parse(text);
  },

  // üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
  changePassword: async (current_password: string, new_password: string) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Next.js proxy, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ –∫—É–∫–∞–º
    const res = await fetch('/api/auth/change-password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ current_password, new_password }),
      cache: 'no-store',
    });

    const contentType = res.headers.get('content-type') || '';
    const text = await res.text().catch(() => '');

    if (!res.ok) {
      // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª JSON ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–¥–∞—ë–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
      let friendly: string | undefined;
      if (contentType.includes('application/json')) {
        try { friendly = extractMessageFromBackend(JSON.parse(text), res.status) } catch {}
      }
      throw new Error(friendly || text || mapErrorToFriendlyMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', res.status));
    }

    // –£—Å–ø–µ—Ö: –æ–±—ã—á–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç JSON –æ—Ç –±—ç–∫–µ–Ω–¥–∞
    if (contentType.includes('application/json')) {
      return JSON.parse(text);
    }
    return { success: true } as any;
  },

  // üîë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ (base64 –∏–ª–∏ URL)
  updateAvatar: async (avatar: string): Promise<{ success: boolean; avatar: string; message: string }> => {
    const token = localStorage.getItem('auth.token');
    if (!token) throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');

    const res = await fetch(buildUrl('/api/users/change_image/'), {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Token ${token}`,
      },
      body: JSON.stringify({ image: avatar }),
    });

    const text = await res.text().catch(() => '');
    if (!res.headers.get('content-type')?.includes('application/json')) {
      throw new Error(mapErrorToFriendlyMessage('–°–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', res.status));
    }

    const data = JSON.parse(text);
    if (!res.ok) {
      const msg = extractMessageFromBackend(data, res.status) || mapErrorToFriendlyMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä', res.status);
      throw new Error(msg);
    }

    return {
      success: true,
      avatar: data.image || data.avatar || data.profile_image || avatar,
      message: '–ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ',
    };
  },

  // üîë –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞ (FormData)
  uploadAvatarFile: async (file: File): Promise<{ success: boolean; avatar: string; message: string }> => {
    const token = localStorage.getItem('auth.token');
    if (!token) throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');

    const formData = new FormData();
    formData.append('image', file);

    const res = await fetch(buildUrl('/api/users/change_image/'), {
      method: 'POST',
      headers: {
        'Authorization': `Token ${token}`,
      },
      body: formData,
    });

    const text = await res.text().catch(() => '');
    if (!res.headers.get('content-type')?.includes('application/json')) {
      throw new Error(mapErrorToFriendlyMessage('–°–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', res.status));
    }

    const data = JSON.parse(text);
    if (!res.ok) {
      const msg = extractMessageFromBackend(data, res.status) || mapErrorToFriendlyMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä', res.status);
      throw new Error(msg);
    }

    return {
      success: true,
      avatar: data.image || data.avatar || data.profile_image || '',
      message: '–ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ',
    };
  },

  // üîë Logout
  logout: async () => {
    const token = localStorage.getItem('auth.token');

    // –°–Ω–∞—á–∞–ª–∞ —á–∏—Å—Ç–∏–º cookie —á–µ—Ä–µ–∑ –Ω–∞—à Next.js proxy, —á—Ç–æ–±—ã middleware –ø–æ—Å—á–∏—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
    try {
      await fetch('/api/auth/logout', { method: 'POST' });
    } catch {}

    // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–æ–±—â–∏—Ç—å –±—ç–∫–µ–Ω–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
    if (token) {
      const res = await fetch(buildUrl('/api/users/logout/'), {
        method: 'POST',
        headers: {
          'Authorization': `Token ${token}`,
        },
      });

      if (!res.ok) {
        const text = await res.text().catch(() => '');
        // –ù–µ –º–µ—à–∞–µ–º –ª–æ–≥–∞—É—Ç—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –±—ç–∫–µ–Ω–¥–∞; –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        console.warn('Backend logout failed:', text || res.status);
      }
    }

    localStorage.removeItem('auth.token');

    return { success: true };
  },
};

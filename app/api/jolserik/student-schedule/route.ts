import { NextRequest, NextResponse } from 'next/server';

// –¢–∏–ø—ã –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
interface ScheduleItem {
  time_start?: string;
  time_end?: string;
  subject_name?: string;
  teacher_name?: string;
  room_number?: string;
  building_name?: string;
  lesson_type?: string;
  status?: string;
  [key: string]: any;
}

interface ScheduleResponse {
  results?: ScheduleItem[];
  [key: string]: any;
}

export async function GET(req: NextRequest) {
  try {
    console.log('=== JOLSERIK SCHEDULE API CALLED ===');
    
    const { searchParams } = new URL(req.url);
    const date = searchParams.get('date') || new Date().toISOString().split('T')[0];
    
    const authCookie = req.cookies.get('auth')?.value;
    const backendSessionCookie = req.cookies.get('backend_session')?.value;
    
    console.log('üîê Auth cookie exists:', !!authCookie);
    console.log('üîê Backend session exists:', !!backendSessionCookie);
    console.log('üìÖ Requesting date:', date);
    
    if (!authCookie && !backendSessionCookie) {
      console.log('‚ùå No auth cookies found');
      return NextResponse.json({ 
        error: 'Unauthorized',
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' 
      }, { status: 401 });
    }
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      'accept': 'application/json',
    };
    
    if (authCookie) {
      headers['Authorization'] = `Token ${authCookie}`;
    }
    if (backendSessionCookie) {
      headers['Cookie'] = `backend_session=${backendSessionCookie}`;
    }
    
    // –ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    const url = `https://id.yu.edu.kz/api/v1/student/schedule/?date=${date}`;
    console.log('üîÑ Fetching schedule from:', url);
    
    const response = await fetch(url, {
      method: 'GET',
      headers,
      cache: 'no-store',
    });

    console.log('üì° API Response status:', response.status);
    console.log('üì° API Response headers:', Object.fromEntries(response.headers.entries()));

    if (response.ok) {
      const data: ScheduleResponse = await response.json();
      console.log('‚úÖ Schedule data received:', JSON.stringify(data, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
      if (!data.results || data.results.length === 0) {
        console.log('‚ö†Ô∏è No schedule data found');
        return NextResponse.json({
          success: false,
          message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã',
          date,
          hasData: false
        });
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Jolserik AI
      const formattedSchedule = {
        success: true,
        date,
        classes: data.results.map((item: ScheduleItem) => ({
          time: `${item.time_start}-${item.time_end}`,
          subject: item.subject_name || '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω',
          teacher: item.teacher_name || '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω',
          room: item.room_number || '–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
          building: item.building_name || '–ö–æ—Ä–ø—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
          type: item.lesson_type || '–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω',
          status: item.status || 'active'
        }))
      };
      
      console.log('‚úÖ Formatted schedule:', formattedSchedule);
      return NextResponse.json(formattedSchedule);
      
    } else {
      const errorText = await response.text();
      console.log('‚ùå API Error:', response.status, errorText);
      
      return NextResponse.json({ 
        error: 'Failed to fetch schedule',
        status: response.status,
        message: errorText || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
        apiUrl: url
      }, { status: response.status });
    }
    
  } catch (error) {
    console.error('üí• Schedule API Error:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

import { NextRequest, NextResponse } from 'next/server';

const API_BASE_URL = process.env.API_BASE_URL || 'https://dba33ae368da.ngrok-free.app';

export async function PUT(req: NextRequest) {
  try {
    console.log('=== UPDATE MEETING BY FIELDS API CALLED ===');
    
    const body = await req.json();
    console.log('Request body received:', JSON.stringify(body, null, 2));
    
    const { searchFields, updatedData } = body;
    
    if (!searchFields || !updatedData) {
      return NextResponse.json(
        { error: 'Search fields and updated data are required' },
        { status: 400 }
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authCookie = req.cookies.get('auth')?.value;
    const backendSessionCookie = req.cookies.get('backend_session')?.value;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      'ngrok-skip-browser-warning': 'true',
    };
    
    if (authCookie) {
      headers['Authorization'] = `Bearer ${authCookie}`;
    }
    
    if (backendSessionCookie) {
      headers['Cookie'] = `backend_session=${backendSessionCookie}`;
    }
    
    console.log('üîç –ò—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –ø–æ–ª—è–º:', searchFields);
    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–º–∏:', updatedData);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å ID
    const endpoints = [
      '/auth/calendar/meetings/',
      '/auth/calendar/meetings',
      '/auth/calendar/meeting/',
      '/auth/calendar/all_meetings/'
    ];
    
    let foundMeeting = null;
    let meetingId = null;
    
    for (const endpoint of endpoints) {
      try {
        console.log(' –ü—Ä–æ–±—É–µ–º endpoint:', `${API_BASE_URL}${endpoint}`);
        
        const response = await fetch(`${API_BASE_URL}${endpoint}`, {
          method: 'GET',
          headers,
          cache: 'no-store',
        });

        if (response.ok) {
          const data = await response.json();
          const meetings = data.results || data;
          
          // –ò—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –ø–æ–ª—è–º
          foundMeeting = meetings.find((meeting: any) => {
            return meeting.campus === searchFields.campus &&
                   meeting.location === searchFields.location &&
                   meeting.date === searchFields.date &&
                   meeting.time_start === searchFields.time_start &&
                   meeting.time_end === searchFields.time_end;
          });
          
          if (foundMeeting) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID
            meetingId = foundMeeting.id || foundMeeting.pk || foundMeeting.uuid;
            if (meetingId) {
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${meetingId} –≤ ${endpoint}`);
              break;
            }
          }
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${endpoint}:`, error);
      }
    }
    
    if (!foundMeeting) {
      console.error('‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º');
      return NextResponse.json(
        { error: 'Meeting not found with specified fields' },
        { status: 404 }
      );
    }
    
    if (!meetingId) {
      console.error('‚ùå –£ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç ID');
      return NextResponse.json(
        { error: 'Found meeting has no ID' },
        { status: 400 }
      );
    }
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', foundMeeting);
    console.log('üÜî ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', meetingId);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateUrls = [
      `${API_BASE_URL}/auth/calendar/change/meeting/${meetingId}/`,
      `${API_BASE_URL}/auth/calendar/meetings/${meetingId}/`,
      `${API_BASE_URL}/auth/calendar/meeting/${meetingId}/`,
    ];
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã
    const methods = ['POST', 'PATCH', 'PUT'];
    
    const errors: string[] = [];
    
    for (const updateUrl of updateUrls) {
      console.log(' –ü—Ä–æ–±—É–µ–º URL:', updateUrl);
      
      for (const method of methods) {
        try {
          console.log(`üîÑ –ü—Ä–æ–±—É–µ–º ${method} –¥–ª—è ${updateUrl}`);
          
          const response = await fetch(updateUrl, {
            method,
            headers,
            body: JSON.stringify(updatedData),
          });

          console.log(` ${method} ${updateUrl} response status:`, response.status);
          
          if (response.ok) {
            const responseText = await response.text();
            console.log(`‚úÖ ${method} —É—Å–ø–µ—à–µ–Ω –¥–ª—è ${updateUrl}:`, responseText);
            
            return NextResponse.json({ 
              success: true, 
              message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
              method,
              url: updateUrl,
              meetingId,
              response: responseText || 'Empty response'
            });
          } else {
            const errorText = await response.text();
            const errorMsg = `${method} ${updateUrl}: ${response.status} - ${errorText.substring(0, 100)}`;
            console.log(`‚ùå ${method} –æ—à–∏–±–∫–∞:`, errorMsg);
            errors.push(errorMsg);
          }
        } catch (error) {
          const errorMsg = `${method} ${updateUrl} exception: ${(error as Error).message}`;
          console.log(`‚ùå ${method} exception:`, errorMsg);
          errors.push(errorMsg);
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    console.error('‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:', errors);
    
    return NextResponse.json(
      { 
        error: 'All update methods failed',
        details: errors,
        meetingId,
        searchFields,
        updatedData,
        triedUrls: updateUrls,
        triedMethods: methods
      },
      { status: 500 }
    );
    
  } catch (error) {
    console.error('‚ùå Error updating meeting by fields:', error);
    return NextResponse.json(
      { error: 'Failed to update meeting by fields', details: (error as Error).message },
      { status: 500 }
    );
  }
}

import { NextRequest, NextResponse } from 'next/server';
import { API_CONFIG, buildApiUrl, getApiHeaders } from '@/lib/config/api';

export async function POST(req: NextRequest) {
  try {
    console.log('=== CREATE MEETING API CALLED ===');
    
    const body = await req.json();
    console.log('üìã Request body received:', JSON.stringify(body, null, 2));
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ['title', 'date', 'time_start', 'time_end', 'campus', 'location'];
    const missingFields = requiredFields.filter(field => !body[field]);
    
    if (missingFields.length > 0) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', missingFields);
      return NextResponse.json(
        { 
          error: 'Validation error', 
          details: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`,
          missingFields 
        },
        { status: 400 }
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authCookie = req.cookies.get('auth')?.value;
    const backendSessionCookie = req.cookies.get('backend_session')?.value;
    
    console.log('üîê Auth cookie exists:', !!authCookie);
    console.log('üîê Backend session cookie exists:', !!backendSessionCookie);
    
    if (!authCookie && !backendSessionCookie) {
      console.error('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return NextResponse.json(
        { 
          error: 'Unauthorized', 
          details: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        },
        { status: 401 }
      );
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    const headers = getApiHeaders({
      ...(authCookie && { 'Authorization': `Token ${authCookie}` }),
      ...(backendSessionCookie && { 'Cookie': `backend_session=${backendSessionCookie}` })
    });
    
    const url = buildApiUrl(API_CONFIG.ENDPOINTS.CREATE_MEETING);
    console.log(' Creating meeting at:', url);
    
    const response = await fetch(url, {
      method: 'POST',
      headers,
      body: JSON.stringify(body),
    });
    
    console.log('üì° API response status:', response.status);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Meeting created successfully:', data);
      return NextResponse.json(data);
    } else {
      const errorText = await response.text();
      console.log('‚ùå API error, status:', response.status);
      console.log('‚ùå API error response:', errorText);
      
      return NextResponse.json(
        { 
          error: 'External API error', 
          status: response.status,
          details: errorText,
          originalError: { message: errorText }
        },
        { status: response.status }
      );
    }
    
  } catch (error) {
    console.error('‚ùå Error in create meeting API:', error);
    
    return NextResponse.json(
      { 
        error: 'Internal server error', 
        details: (error as Error).message,
        stack: process.env.NODE_ENV === 'development' ? (error as Error).stack : undefined
      },
      { status: 500 }
    );
  }
}

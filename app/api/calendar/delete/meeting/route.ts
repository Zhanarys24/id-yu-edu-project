import { NextRequest, NextResponse } from 'next/server';

const API_BASE_URL = process.env.API_BASE_URL || 'https://dba33ae368da.ngrok-free.app';

export async function DELETE(req: NextRequest) {
  try {
    console.log('=== DELETE MEETING API CALLED ===');
    
    const { searchParams } = new URL(req.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json(
        { error: 'Meeting ID is required' },
        { status: 400 }
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ cookies (–∫–∞–∫ –≤ create API)
    const token = req.cookies.get('auth')?.value;
    const authMode = req.cookies.get('auth_mode')?.value;
    const backendSession = req.cookies.get('backend_session')?.value;
    
    console.log('Auth token present:', !!token);
    console.log('Auth mode:', authMode);
    console.log('Backend session present:', !!backendSession);
    
    if (!token && !backendSession) {
      console.error('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return NextResponse.json(
        { 
          error: 'Unauthorized', 
          details: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        },
        { status: 401 }
      );
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API (–∫–∞–∫ –≤ create API)
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
      'ngrok-skip-browser-warning': 'true',
      'Accept': 'application/json',
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º Authorization header –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if (token) {
      headers['Authorization'] = `${process.env.AUTH_TOKEN_SCHEME || 'Bearer'} ${token}`;
      console.log('‚úÖ Added Authorization header');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º Cookie –¥–ª—è backend session –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cookie auth
    if (authMode === 'cookie' && (backendSession || token)) {
      headers['Cookie'] = `${process.env.AUTH_BACKEND_COOKIE_NAME || 'sessionid'}=${backendSession || token}`;
      console.log('‚úÖ Added Cookie header for backend session');
    }
    
    console.log('Headers for external API:', Object.keys(headers));
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const deleteUrls = [
      `${API_BASE_URL}/auth/calendar/meetings/${id}/`,
      `${API_BASE_URL}/auth/calendar/meeting/${id}/`,
      `${API_BASE_URL}/auth/calendar/delete/meeting/${id}/`,
    ];
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã
    const methods = ['DELETE', 'POST'];
    
    const errors: string[] = [];
    
    for (const deleteUrl of deleteUrls) {
      console.log(' –ü—Ä–æ–±—É–µ–º URL:', deleteUrl);
      
      for (const method of methods) {
        try {
          console.log(`üîÑ –ü—Ä–æ–±—É–µ–º ${method} –¥–ª—è ${deleteUrl}`);
          
          const response = await fetch(deleteUrl, {
            method,
            headers,
          });

          console.log(` ${method} ${deleteUrl} response status:`, response.status);
          
          if (response.ok) {
            const responseText = await response.text();
            console.log(`‚úÖ ${method} —É—Å–ø–µ—à–µ–Ω –¥–ª—è ${deleteUrl}:`, responseText);
            
            return NextResponse.json({ 
              success: true, 
              message: 'Meeting deleted successfully',
              method,
              url: deleteUrl,
              response: responseText || 'Empty response'
            });
          } else {
            const errorText = await response.text();
            const errorMsg = `${method} ${deleteUrl}: ${response.status} - ${errorText.substring(0, 100)}`;
            console.log(`‚ùå ${method} –æ—à–∏–±–∫–∞:`, errorMsg);
            errors.push(errorMsg);
          }
        } catch (error) {
          const errorMsg = `${method} ${deleteUrl} exception: ${(error as Error).message}`;
          console.log(`‚ùå ${method} exception:`, errorMsg);
          errors.push(errorMsg);
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    console.error('‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:', errors);
    
    return NextResponse.json(
      { 
        error: 'All delete methods failed',
        details: errors,
        meetingId: id,
        triedUrls: deleteUrls,
        triedMethods: methods
      },
      { status: 500 }
    );
    
  } catch (error) {
    console.error('‚ùå Error deleting meeting:', error);
    return NextResponse.json(
      { error: 'Failed to delete meeting', details: (error as Error).message },
      { status: 500 }
    );
  }
}
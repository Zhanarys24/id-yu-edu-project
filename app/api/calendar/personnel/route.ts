import { NextRequest, NextResponse } from 'next/server';

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL –¥–ª—è –≤–∞—à–µ–≥–æ API
const API_BASE_URL = 'https://31f494e70eb1.ngrok-free.app';

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
const DEFAULT_PERSONNEL = [
  { id: 1, full_name: '—É –≤–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª', work_phone: '+7 (777) 123-45-67' },
  { id: 2, full_name: '—É –≤–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª', work_phone: '+7 (777) 234-56-78' },
  { id: 3, full_name: '—É –≤–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª', work_phone: '+7 (777) 345-67-89' },
  { id: 4, full_name: '—É –≤–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª', work_phone: '+7 (777) 456-78-90' },
  { id: 5, full_name: '—É –≤–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª', work_phone: '+7 (777) 567-89-01' }
];

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const page = searchParams.get('page') || '1';
    const size = searchParams.get('size') || '100';

    const url = `${API_BASE_URL}/auth/calendar/personnel/?page=${page}&size=${size}`;
    console.log(' –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª –∏–∑ API:', url);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'ngrok-skip-browser-warning': 'true',
      },
      cache: 'no-store',
    });

    console.log('üì° API –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å:', response.status);
    console.log('üì° API –æ—Ç–≤–µ—Ç headers:', Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      console.warn('‚ö†Ô∏è API –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return NextResponse.json({
        count: DEFAULT_PERSONNEL.length,
        size: DEFAULT_PERSONNEL.length,
        next: null,
        previous: null,
        results: DEFAULT_PERSONNEL
      });
    }

    const responseText = await response.text();
    console.log('üì° API –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', responseText.substring(0, 500));
    
    let data;
    try {
      data = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      console.log('üì° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', responseText);
      return NextResponse.json({
        count: DEFAULT_PERSONNEL.length,
        size: DEFAULT_PERSONNEL.length,
        next: null,
        previous: null,
        results: DEFAULT_PERSONNEL
      });
    }

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', {
      count: data.count,
      results: data.results?.length || 0,
      firstResult: data.results?.[0] || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏ –≤–∞—à API
    return NextResponse.json(data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', error);
    return NextResponse.json({
      count: DEFAULT_PERSONNEL.length,
      size: DEFAULT_PERSONNEL.length,
      next: null,
      previous: null,
      results: DEFAULT_PERSONNEL
    });
  }
}




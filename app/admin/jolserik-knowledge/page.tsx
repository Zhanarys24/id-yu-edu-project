'use client'

import { useState, useEffect } from 'react'
import { Upload, FileText, Trash2, CheckCircle, AlertCircle } from 'lucide-react'

interface Document {
  id: string
  filename: string
  category: string
  chunks: string[]
  createdAt: string
}

export default function JolserikKnowledgePage() {
  const [uploading, setUploading] = useState(false)
  const [documents, setDocuments] = useState<Document[]>([])
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null)
  const [selectedCategory, setSelectedCategory] = useState('general')

  useEffect(() => {
    loadDocuments()
  }, [])

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
    if (file.size > 10 * 1024 * 1024) {
      setMessage({ type: 'error', text: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 10MB.' })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedTypes = ['text/plain', 'application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword']
    if (!allowedTypes.includes(file.type)) {
      setMessage({ type: 'error', text: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PDF, Word –∏–ª–∏ TXT.' })
      return
    }

    setUploading(true)
    setMessage(null)
    
    const formData = new FormData()
    formData.append('file', file)
    formData.append('category', selectedCategory)

    try {
      const response = await fetch('/api/jolserik/knowledge/upload', {
        method: 'POST',
        body: formData
      })

      const result = await response.json()
      
      if (result.success) {
        setMessage({ 
          type: 'success', 
          text: `‚úÖ –î–æ–∫—É–º–µ–Ω—Ç "${file.name}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –°–æ–∑–¥–∞–Ω–æ ${result.chunks} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.` 
        })
        loadDocuments()
        // –û—á–∏—â–∞–µ–º input
        e.target.value = ''
      } else {
        setMessage({ type: 'error', text: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + result.error })
      }
    } catch (error) {
      setMessage({ type: 'error', text: '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error })
    } finally {
      setUploading(false)
    }
  }

  const loadDocuments = async () => {
    try {
      const response = await fetch('/api/jolserik/knowledge/list')
      if (response.ok) {
        const data = await response.json()
        setDocuments(data.documents || [])
      }
    } catch (error) {
      console.error('Error loading documents:', error)
    }
  }

  const deleteDocument = async (id: string) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π?')) return

    try {
      const response = await fetch(`/api/jolserik/knowledge/delete/${id}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        setMessage({ type: 'success', text: '–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω' })
        loadDocuments()
      } else {
        setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è' })
      }
    } catch (error) {
      setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏' })
    }
  }

  const testSearch = async () => {
    const query = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    if (!query) return

    try {
      const response = await fetch('/api/jolserik/knowledge/search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query, limit: 3 })
      })

      const result = await response.json()
      
      if (result.success) {
        const resultText = result.results.length > 0 
          ? `–ù–∞–π–¥–µ–Ω–æ ${result.results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n${result.results.map((r: any) => `üìÑ ${r.content.substring(0, 200)}...`).join('\n\n')}`
          : '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        
        alert(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n\n${resultText}`)
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π Jolserik AI</h1>
        <p className="text-gray-600 mb-8">–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI-–ø–æ–º–æ—â–Ω–∏–∫–∞</p>
        
        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {message && (
          <div className={`mb-6 p-4 rounded-lg flex items-center gap-3 ${
            message.type === 'success' ? 'bg-green-50 text-green-800 border border-green-200' : 'bg-red-50 text-red-800 border border-red-200'
          }`}>
            {message.type === 'success' ? <CheckCircle className="h-5 w-5" /> : <AlertCircle className="h-5 w-5" />}
            {message.text}
          </div>
        )}

        {/* –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
        <div className="bg-white rounded-lg shadow-sm border p-6 mb-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            <Upload className="h-5 w-5 inline mr-2" />
            –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Jolserik AI
          </h2>
          
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
            <input
              type="file"
              id="fileInput"
              className="hidden"
              accept=".pdf,.docx,.txt"
              onChange={handleFileUpload}
              disabled={uploading}
            />
            <label 
              htmlFor="fileInput"
              className={`cursor-pointer inline-flex flex-col items-center ${uploading ? 'opacity-50' : ''}`}
            >
              <Upload className="h-12 w-12 text-gray-400 mb-4" />
              <span className="text-lg font-medium text-gray-900 mb-2">
                {uploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'}
              </span>
              <span className="text-sm text-gray-500">
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, TXT
              </span>
            </label>
          </div>

          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            </label>
            <select 
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="general">–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</option>
              <option value="navigation">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–º–ø—É—Å—É</option>
              <option value="academic">–£—á–µ–±–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</option>
              <option value="documents">–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–ø—Ä–∞–≤–∫–∏</option>
              <option value="dormitory">–û–±—â–µ–∂–∏—Ç–∏–µ</option>
              <option value="services">–£—Å–ª—É–≥–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã</option>
            </select>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            <FileText className="h-5 w-5 inline mr-2" />
            –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã ({documents.length})
          </h2>
          
          {documents.length === 0 ? (
            <p className="text-gray-500 text-center py-8">
              –î–æ–∫—É–º–µ–Ω—Ç—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤—ã—à–µ.
            </p>
          ) : (
            <div className="space-y-3">
              {documents.map((doc) => (
                <div key={doc.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-center">
                    <FileText className="h-5 w-5 text-blue-500 mr-3" />
                    <div>
                      <h3 className="font-medium text-gray-900">{doc.filename}</h3>
                      <p className="text-sm text-gray-500">
                        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {doc.category} ‚Ä¢ {doc.chunks.length} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ ‚Ä¢ {new Date(doc.createdAt).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                  <button
                    onClick={() => deleteDocument(doc.id)}
                    className="text-red-600 hover:text-red-800 p-2 rounded"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

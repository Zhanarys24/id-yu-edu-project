'use client'

import Layout from '@/components/Layout'
import '@/styles/calendar/calendar.css'
import { useState, useRef, useEffect } from 'react'
import FullCalendar from '@fullcalendar/react'
import dayGridPlugin from '@fullcalendar/daygrid'
import timeGridPlugin from '@fullcalendar/timegrid'
import interactionPlugin, { DateClickArg } from '@fullcalendar/interaction'
import { EventClickArg } from '@fullcalendar/core'
import { format, parseISO, isSameDay, addMinutes } from 'date-fns'
import { ru, enUS } from 'date-fns/locale'
import { ChevronLeft, ChevronRight, Calendar, Clock, MapPin, Users } from 'lucide-react'
import { useTranslation } from 'react-i18next'
import '@/i18n'
import { CalendarService, CalendarEvent, CalendarUser, PersonnelSimple, ExternalParticipant } from '@/lib/services/calendarService'
import { LocalStorageService, LocalEvent } from '@/lib/services/localStorageService'
import { WebSocketService } from '@/lib/services/websocketService'


// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
type Event = CalendarEvent;
type User = CalendarUser;

export default function CalendarPage() {
  const { t, i18n } = useTranslation('common')
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [modalOpen, setModalOpen] = useState(false)
  const [dropdownOpen, setDropdownOpen] = useState(false)
  const [loading, setLoading] = useState(false)

  // Toast notification state
  const [toast, setToast] = useState<{ message: string; type?: 'success' | 'error' } | null>(null)
  
  const showToast = (message: string, type: 'success' | 'error' = 'success') => {
    setToast({ message, type });
    setTimeout(() => setToast(null), 5000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 5 —Å–µ–∫—É–Ω–¥
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const [events, setEvents] = useState<Event[]>([])
  const [users, setUsers] = useState<User[]>([])
  const [participants, setParticipants] = useState<PersonnelSimple[]>([])
  const [campuses, setCampuses] = useState<Array<{id: number, name: string}>>([])
  const [locations, setLocations] = useState<Array<{id: number, name: string, campus_id: number}>>([])
  const [personnel, setPersonnel] = useState<PersonnelSimple[]>([])
  const [participantSearch, setParticipantSearch] = useState('')

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã —Å–æ–±—ã—Ç–∏—è
  const [newEvent, setNewEvent] = useState({ start: '', color: 'blue' })
  const [eventTitle, setEventTitle] = useState('')
  const [eventStart, setEventStart] = useState('')
  const [eventEnd, setEventEnd] = useState('')
  const [eventColor, setEventColor] = useState('blue')
  const [eventCampus, setEventCampus] = useState<number | null>(null)
  const [eventLocation, setEventLocation] = useState<number | null>(null)
  const [isOnline, setIsOnline] = useState(false)
  const [eventLink, setEventLink] = useState('')
  const [eventDescription, setEventDescription] = useState('')

  // –†–µ—Ñ—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const calendarRef = useRef<FullCalendar>(null)
  const [miniCalendarDate, setMiniCalendarDate] = useState(new Date())

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  const places = [
    '–ê—Ç—Ä–∏—É–º', 
    '–¢”ô—É–µ–ª—Å—ñ–∑–¥—ñ–∫ —Ö–æ–ª–ª—ã', 
    '15 —ç—Ç–∞–∂, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü –∑–∞–ª', 
    '–ú–∞“£“ì—ã—à–ª–∞“õ', 
    '–ë–æ–∑–∂—ã—Ä–∞', 
    '–®–µ—Ä“õ–∞–ª–∞', 
    '–ê“õ—Ç–∞—É, Technopark'
  ]

const lang = i18n?.language || 'ru' // –¥–µ—Ñ–æ–ª—Ç, –µ—Å–ª–∏ undefined

const weekValue = t('calendarPage.weekdaysShort', { returnObjects: true }) as unknown
const weekdaysShort: string[] = Array.isArray(weekValue)
  ? (weekValue as string[])
  : lang.startsWith('en')
    ? ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
    : lang === 'kz'
      ? ['–î—Å', '–°—Å', '–°—Ä', '–ë—Å', '–ñ–º', '–°–±', '–ñ—Å']
      : ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']


  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        const connectionTest = await CalendarService.testConnection();
        console.log('üì° –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectionTest.message);
        
        if (!connectionTest.success) {
          console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –≤–∫–ª—é—á–∞—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const [meetingsData, usersData, campusesData, locationsData, externalParticipantsData] = await Promise.all([
          CalendarService.getAllMeetings(),
          CalendarService.getUsers(),
          CalendarService.getCampuses(),
          CalendarService.getLocations(),
          CalendarService.getAllExternalParticipants() // –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–ì–†–£–ó–ö–£ –£–ß–ê–°–¢–ù–ò–ö–û–í
        ])
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const calendarEvents = meetingsData.map(meeting => 
          CalendarService.transformMeetingToEvent(meeting)
        )
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–Ω–µ—à–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ PersonnelSimple –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const personnelData = externalParticipantsData.map(participant => 
          CalendarService.transformExternalToPersonnel(participant)
        )
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        const validEvents = calendarEvents.filter((event) => {
          return event && 
                 typeof event.start === 'string' && 
                 event.start.length > 0 &&
                 typeof event.end === 'string' && 
                 event.end.length > 0 &&
                 event.title
        })
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const validUsers = usersData.filter((user) => {
          return user && user.id && user.name && user.email
        })
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
        const validPersonnel = personnelData
          .filter((person) => {
            return person && person.id && person.full_name
          })
          .reduce((unique, person) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID
            const exists = unique.some(p => p.id === person.id);
            if (!exists) {
              unique.push(person);
            }
            return unique;
          }, [] as PersonnelSimple[]);
        
        setEvents(validEvents)
        setUsers(validUsers)
        setPersonnel(validPersonnel) // –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –£–ß–ê–°–¢–ù–ò–ö–û–í
        setCampuses(campusesData)
        setLocations(locationsData)
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π:', validEvents.length)
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', validUsers.length)
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API:', validPersonnel.length)
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—Ä–ø—É—Å–æ–≤:', campusesData.length)
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ—Å—Ç:', locationsData.length)
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error)
        setEvents([])
        setUsers([])
        setPersonnel([]) // –î–û–ë–ê–í–õ–Ø–ï–ú –°–ë–†–û–° –£–ß–ê–°–¢–ù–ò–ö–û–í
        setCampuses([])
        setLocations([])
      } finally {
        setLoading(false)
      }
    }
    
    fetchData()
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–∞—Ç–µ
  const handleDateClick = (arg: DateClickArg) => {
    console.log('üìÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', participants.length);
    setNewEvent({ ...newEvent, start: arg.dateStr })
    setModalOpen(true)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
  const isTimeSlotAvailable = (startStr: string, endStr: string, place: string): boolean => {
    try {
      const newStart = parseISO(startStr)
      const newEnd = parseISO(endStr)
      
      return !events.some(event => {
        if (!event.place || event.place !== place) return false
        if (!event.start || !event.end) return false
        
        try {
          const eventStart = parseISO(event.start)
          const eventEnd = parseISO(event.end)
          const bufferEnd = addMinutes(eventEnd, 10)
          
          return (newStart < bufferEnd && newEnd > eventStart)
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è:', event)
          return false
        }
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏:', error)
      return false
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = (): string | null => {
    if (!eventTitle.trim()) return '–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    if (eventTitle.trim().length > 200) return '–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤'
    if (!newEvent.start) return '–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
    if (!eventStart) return '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    if (!eventEnd) return '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    if (!eventLocation) return '–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (eventStart >= eventEnd) {
      return '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞'
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã (–Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º)
    const selectedDate = new Date(newEvent.start)
    const today = new Date()
    today.setHours(0, 0, 0, 0)
    if (selectedDate < today) {
      return '–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –≤ –ø—Ä–æ—à–ª–æ–º'
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á
    if (isOnline) {
      if (participants.length === 0) {
        return '–î–ª—è –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
      }
      if (!eventLink.trim()) {
        return '–î–ª—è –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Å—Å—ã–ª–∫–∞'
      }
      // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
      try {
        new URL(eventLink.trim())
      } catch {
        return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É'
      }
    }
    
    return null
  }


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  const handleAdd = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    const validationError = validateForm()
    if (validationError) {
      showToast(validationError, 'error')
      return
    }

    const fullStart = `${newEvent.start}T${eventStart}`
    const fullEnd = `${newEvent.start}T${eventEnd}`

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞
    const locationName = locations.find(l => l.id === eventLocation)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ';
    if (!isTimeSlotAvailable(fullStart, fullEnd, locationName)) {
      showToast('–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ', 'error')
      return
    }

    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
    const meetingData = {
      title: eventTitle.trim(),
      date: newEvent.start,  // YYYY-MM-DD
      time_start: eventStart,  // HH:MM
      time_end: eventEnd,      // HH:MM
      campus: eventCampus,     // ID –∫–æ—Ä–ø—É—Å–∞
      location: eventLocation, // ID –º–µ—Å—Ç–∞
      guests: participants.map(p => p.id), // –ú–∞—Å—Å–∏–≤ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      description: eventDescription.trim() || null,
      link: isOnline ? eventLink.trim() : null,
      color: eventColor
    }

    console.log("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:", meetingData)

    setLoading(true)
    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á—É —á–µ—Ä–µ–∑ API
      const savedMeeting = await CalendarService.createMeeting(meetingData)
      console.log('–í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', savedMeeting)
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      const eventToAdd = CalendarService.transformMeetingToEvent(savedMeeting)
      console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', eventToAdd)
      
      setEvents(prev => {
        const newEvents = [...prev, eventToAdd]
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ, –≤—Å–µ–≥–æ:', newEvents.length)
        return newEvents
      })
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      if (calendarRef.current) {
        calendarRef.current.getApi().refetchEvents()
      }
      
      resetForm()
      setModalOpen(false)
      showToast('–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', 'success')
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', error)
      const errorMessage = (error as Error).message
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (errorMessage.includes('—É–∂–µ –∑–∞–Ω—è—Ç–æ')) {
        showToast('–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –º–µ—Å—Ç–æ.', 'error')
      } else if (errorMessage.includes('400')) {
        showToast('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π.', 'error')
      } else if (errorMessage.includes('401')) {
        showToast('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.', 'error')
      } else if (errorMessage.includes('403')) {
        showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏.', 'error')
      } else if (errorMessage.includes('500')) {
        showToast('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error')
      } else {
        showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: ' + errorMessage, 'error')
      }
    } finally {
      setLoading(false)
    }
  }

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  const resetForm = () => {
    setEventTitle('')
    setEventStart('')
    setEventEnd('')
    setEventColor('blue')
    setEventCampus(null)
    setEventLocation(null)
    setIsOnline(false)
    setEventLink('')
    setEventDescription('')
    setParticipants([])
    setNewEvent({ start: '', color: 'blue' })
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleCloseModal = () => {
    setModalOpen(false)
    setDropdownOpen(false)
    resetForm()
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –º–∏–Ω–∏-–∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const startOfMonth = new Date(miniCalendarDate.getFullYear(), miniCalendarDate.getMonth(), 1)
  const startDay = startOfMonth.getDay() === 0 ? 6 : startOfMonth.getDay() - 1
  const daysInMonth = new Date(miniCalendarDate.getFullYear(), miniCalendarDate.getMonth() + 1, 0).getDate()
  const daysInPrev = new Date(miniCalendarDate.getFullYear(), miniCalendarDate.getMonth(), 0).getDate()
  const totalCells = Math.ceil((startDay + daysInMonth) / 7) * 7

  // –°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–µ–∫ –¥–ª—è –º–∏–Ω–∏-–∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const cells = Array.from({ length: totalCells }, (_, i) => {
    const dayNum = i - startDay + 1
    let date = new Date(miniCalendarDate.getFullYear(), miniCalendarDate.getMonth(), dayNum)
    const inMonth = dayNum >= 1 && dayNum <= daysInMonth
    
    if (!inMonth) {
      if (dayNum < 1) {
        date = new Date(miniCalendarDate.getFullYear(), miniCalendarDate.getMonth() - 1, daysInPrev + dayNum)
      } else {
        date = new Date(miniCalendarDate.getFullYear(), miniCalendarDate.getMonth() + 1, dayNum - daysInMonth)
      }
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –¥–ª—è –¥–Ω–µ–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏
    const dots: Array<{color: string}> = [] // ‚Üê –ü–†–û–°–¢–û –í–û–ó–í–†–ê–©–ê–ï–ú –ü–£–°–¢–û–ô –ú–ê–°–°–ò–í
    
    return { date, inMonth, dots }
  })

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ –º–∏–Ω–∏-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ
  const changeMonth = (offset: number) => {
    const newDate = new Date(miniCalendarDate)
    newDate.setMonth(newDate.getMonth() + offset)
    setMiniCalendarDate(newDate)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
  const nearestEvents = events
    .filter(event => {
      if (!event.start || typeof event.start !== 'string') {
        return false
      }
      try {
        return isSameDay(parseISO(event.start), new Date())
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã:', event.start, error)
        return false
      }
    })
    .sort((a, b) => {
      try {
        return parseISO(a.start).getTime() - parseISO(b.start).getTime()
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ —Å–æ–±—ã—Ç–∏–π:', error)
        return 0
      }
    })
    .slice(0, 3)

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const handleParticipantToggle = (user: PersonnelSimple) => {
    setParticipants(prev =>
      prev.some(p => p.id === user.id)
        ? prev.filter(p => p.id !== user.id)
        : [...prev, user]
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const loadParticipants = async () => {
    setLoading(true);
    try {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
      const externalParticipantsData = await CalendarService.getAllExternalParticipants();
      const personnelData = externalParticipantsData.map(participant => 
        CalendarService.transformExternalToPersonnel(participant)
      );
      // –í —Ñ—É–Ω–∫—Ü–∏–∏ loadParticipants —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
      const validPersonnel = personnelData
        .filter((person) => {
          return person && person.id && person.full_name
        })
        .reduce((unique, person) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID
          const exists = unique.some(p => p.id === person.id);
          if (!exists) {
            unique.push(person);
          }
          return unique;
        }, [] as PersonnelSimple[]);
      setPersonnel(validPersonnel); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      console.log('‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', validPersonnel.length);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ' + (error as Error).message);
    } finally {
      setLoading(false);
    }
  };

  // useEffect –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏
  useEffect(() => {
    if (!isOnline) {
      // –ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏ –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      console.log('üîÑ –í—ã–∫–ª—é—á–µ–Ω–∞ –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∞, –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
      setParticipants([]);
    }
  }, [isOnline]);

  // useEffect –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç dropdown –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const ParticipantsDropdown = () => {
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const uniquePersonnel = personnel.reduce((unique, person) => {
      const exists = unique.some(p => p.id === person.id);
      if (!exists) {
        unique.push(person);
      }
      return unique;
    }, [] as PersonnelSimple[]);

    return (
      <div className="form-group">
        <label style={{
          display: 'block',
          marginBottom: '12px',
          fontWeight: '600',
          color: '#2c3e50',
          fontSize: '16px'
        }}>
          <Users className="inline-block w-4 h-4 mr-2" />
          {t('calendarPage.form.participants')} *
        </label>
        
        {/* –ü–æ–ª–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ */}
        <div style={{ 
          minHeight: '60px',
          border: '2px solid #e1e5e9',
          borderRadius: '12px',
          padding: '12px',
          backgroundColor: '#f8f9fa',
          marginBottom: '12px',
          transition: 'border-color 0.3s ease',
          position: 'relative'
        }}>
          {participants.length === 0 ? (
            <div style={{ 
              display: 'flex', 
              alignItems: 'center', 
              color: '#6c757d', 
              fontSize: '14px',
              height: '36px'
            }}>
              <span style={{ marginRight: '8px' }}>üîç</span>
              –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ
            </div>
          ) : (
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
              {participants.map(person => (
                <div
                  key={person.id}
                  style={{
                    backgroundColor: '#007bff',
                    color: 'white',
                    padding: '8px 12px',
                    borderRadius: '20px',
                    fontSize: '13px',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px',
                    boxShadow: '0 2px 4px rgba(0,123,255,0.2)',
                    transition: 'all 0.2s ease'
                  }}
                  onMouseEnter={(e) => {
                    (e.currentTarget as HTMLElement).style.backgroundColor = '#0056b3';
                    (e.currentTarget as HTMLElement).style.transform = 'scale(1.05)';
                  }}
                  onMouseLeave={(e) => {
                    (e.currentTarget as HTMLElement).style.backgroundColor = '#007bff';
                    (e.currentTarget as HTMLElement).style.transform = 'scale(1)';
                  }}
                >
                  <span style={{ fontWeight: '500' }}>{person.full_name}</span>
                  <button
                    type="button"
                    onClick={() => handleParticipantToggle(person)}
                    style={{
                      background: 'rgba(255,255,255,0.2)',
                      border: 'none',
                      color: 'white',
                      cursor: 'pointer',
                      fontSize: '14px',
                      padding: '0',
                      borderRadius: '50%',
                      width: '18px',
                      height: '18px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      transition: 'background-color 0.2s ease',
                      lineHeight: '1',
                      minWidth: '18px',
                      minHeight: '18px'
                    }}
                    onMouseEnter={(e) => (e.target as HTMLElement).style.backgroundColor = 'rgba(255,255,255,0.3)'}
                    onMouseLeave={(e) => (e.target as HTMLElement).style.backgroundColor = 'rgba(255,255,255,0.2)'}
                  >
                    √ó
                  </button>
                </div>
              ))}
            </div>
          )}
          
          {/* –°—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
          {participants.length > 0 && (
            <div style={{
              position: 'absolute',
              top: '8px',
              right: '12px',
              backgroundColor: '#28a745',
              color: 'white',
              fontSize: '11px',
              padding: '2px 6px',
              borderRadius: '10px',
              fontWeight: '600'
            }}>
              {participants.length}
            </div>
          )}
        </div>
        
        {/* –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
        <div style={{ marginBottom: '12px' }}>
          <input
            type="text"
            placeholder="üîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
            value={participantSearch}
            onChange={(e) => setParticipantSearch(e.target.value)}
            style={{
              width: '100%',
              padding: '12px 16px',
              border: '2px solid #e1e5e9',
              borderRadius: '8px',
              fontSize: '14px',
              outline: 'none',
              transition: 'border-color 0.3s ease',
              boxSizing: 'border-box'
            }}
            onFocus={(e) => e.target.style.borderColor = '#007bff'}
            onBlur={(e) => e.target.style.borderColor = '#e1e5e9'}
          />
        </div>
        
        {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
        <div style={{ position: 'relative' }}>
          <div 
            onClick={() => {
              if (!loading) {
                setDropdownOpen(!dropdownOpen);
              }
            }}
            style={{ 
              cursor: loading ? 'not-allowed' : 'pointer',
              opacity: loading ? 0.6 : 1,
              padding: '12px 16px',
              border: '2px solid #e1e5e9',
              borderRadius: '8px',
              backgroundColor: 'white',
              minHeight: '48px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              transition: 'all 0.3s ease'
            }}
            onMouseEnter={(e) => !loading && ((e.target as HTMLElement).style.borderColor = '#007bff')}
            onMouseLeave={(e) => !loading && ((e.target as HTMLElement).style.borderColor = '#e1e5e9')}
          >
            <span style={{ 
              color: loading ? '#6c757d' : '#495057',
              fontSize: '14px',
              fontWeight: '500'
            }}>
              {loading ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...' : 
               uniquePersonnel.length === 0 ? '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' : 
               `üìã –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ ${uniquePersonnel.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`}
            </span>
            <span style={{ 
              fontSize: '12px',
              color: '#6c757d',
              transition: 'transform 0.3s ease',
              transform: dropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)'
            }}>
              ‚ñº
            </span>
          </div>
          
          {dropdownOpen && (
            <div 
              style={{
                position: 'absolute',
                top: '100%',
                left: 0,
                right: 0,
                backgroundColor: 'white',
                border: '2px solid #e1e5e9',
                borderRadius: '8px',
                maxHeight: '300px',
                overflowY: 'auto',
                zIndex: 1000,
                boxShadow: '0 8px 25px rgba(0,0,0,0.15)',
                marginTop: '4px'
              }}
            >
              {loading ? (
                <div style={{ 
                  padding: '20px', 
                  textAlign: 'center',
                  color: '#6c757d'
                }}>
                  <div style={{ fontSize: '18px', marginBottom: '8px' }}>‚è≥</div>
                  –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...
                </div>
              ) : uniquePersonnel.length === 0 ? (
                <div style={{ 
                  padding: '20px', 
                  textAlign: 'center', 
                  color: '#6c757d'
                }}>
                  <div style={{ fontSize: '18px', marginBottom: '8px' }}>‚ùå</div>
                  –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </div>
              ) : (
                uniquePersonnel
                  .filter(person => {
                    const isNotSelected = !participants.some(p => p.id === person.id);
                    const matchesSearch = person.full_name.toLowerCase().includes(participantSearch.toLowerCase());
                    return isNotSelected && matchesSearch;
                  })
                  .map(person => (
                    <div
                      key={person.id}
                      onClick={() => handleParticipantToggle(person)}
                      style={{ 
                        padding: '12px 16px',
                        cursor: 'pointer',
                        borderBottom: '1px solid #f8f9fa',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '12px',
                        transition: 'all 0.2s ease'
                      }}
                      onMouseEnter={(e) => {
                        (e.target as HTMLElement).style.backgroundColor = '#f8f9fa';
                        (e.target as HTMLElement).style.paddingLeft = '20px';
                      }}
                      onMouseLeave={(e) => {
                        (e.target as HTMLElement).style.backgroundColor = 'transparent';
                        (e.target as HTMLElement).style.paddingLeft = '16px';
                      }}
                    >
                      <div style={{
                        width: '32px',
                        height: '32px',
                        backgroundColor: '#007bff',
                        borderRadius: '50%',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        color: 'white',
                        fontSize: '14px',
                        fontWeight: '600'
                      }}>
                        {person.full_name.charAt(0).toUpperCase()}
                      </div>
                      <div style={{ flex: 1 }}>
                        <div style={{ 
                          fontWeight: '500', 
                          color: '#2c3e50',
                          fontSize: '14px'
                        }}>
                          {person.full_name}
                        </div>
                        {person.work_phone && (
                          <div style={{ 
                            color: '#6c757d', 
                            fontSize: '12px',
                            marginTop: '2px'
                          }}>
                            üìû {person.work_phone}
                          </div>
                        )}
                      </div>
                      <div style={{
                        color: '#28a745',
                        fontSize: '16px',
                        fontWeight: 'bold'
                      }}>
                        +
                      </div>
                    </div>
                  ))
              )}
              
              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
              {participantSearch && uniquePersonnel.filter(person => 
                !participants.some(p => p.id === person.id) && 
                person.full_name.toLowerCase().includes(participantSearch.toLowerCase())
              ).length === 0 && (
                <div style={{ 
                  padding: '20px', 
                  textAlign: 'center', 
                  color: '#6c757d',
                  fontSize: '14px'
                }}>
                  üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "{participantSearch}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    );
  };

  // –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const [adminChanges, setAdminChanges] = useState<Array<{
    type: 'created' | 'updated' | 'deleted';
    event: LocalEvent;
    timestamp: Date;
  }>>([]);

  // –í useEffect –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const syncInterval = setInterval(async () => {
      try {
        const result = await LocalStorageService.syncWithConflictResolution();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if (result.conflicts > 0) {
          showToast(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${result.conflicts} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤. –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.`);
        }
        
        // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å API
        const serverEvents = await CalendarService.getAllMeetings();
        const localEvents = LocalStorageService.getEvents();
        
        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
        const updatedEvents = localEvents.map((localEvent: any) => {
          const serverEvent = serverEvents.find(e => e.id === localEvent.id);
          if (serverEvent && serverEvent.lastModified > localEvent.lastModified) {
            // –°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–≤–µ–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            return {
              ...serverEvent,
              syncStatus: 'synced' as const
            };
          }
          return localEvent;
        });
        
        // 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
        const newServerEvents = serverEvents.filter(serverEvent => 
          !localEvents.some((localEvent: any) => localEvent.id === serverEvent.id)
        );
        
        const allEvents = [...updatedEvents, ...newServerEvents.map(e => ({
          ...e,
          syncStatus: 'synced' as const
        }))];
        
        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        LocalStorageService.saveEvents(allEvents);
        setEvents(allEvents);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        // const pendingSync = LocalStorageService.getPendingSync();
        // setPendingSyncCount(pendingSync.length);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      }
    }, 30000); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(syncInterval);
  }, []);

  // useEffect –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞
  const AdminChangesIndicator = () => {
    if (adminChanges.length === 0) return null;

    return (
      <div style={{
        position: 'fixed',
        top: '80px',
        right: '20px',
        backgroundColor: '#17a2b8',
        color: 'white',
        padding: '8px 16px',
        borderRadius: '8px',
        fontSize: '14px',
        zIndex: 1000,
        maxWidth: '300px'
      }}>
        <div>üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</div>
        {adminChanges.map((change, index) => (
          <div key={index} style={{ fontSize: '12px', marginTop: '4px' }}>
            {change.type === 'created' && '‚ûï –°–æ–∑–¥–∞–Ω–æ: '}
            {change.type === 'updated' && '‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: '}
            {change.type === 'deleted' && 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: '}
            {change.event.title}
          </div>
        ))}
        <button 
          onClick={() => setAdminChanges([])}
          style={{
            background: 'rgba(255,255,255,0.2)',
            border: 'none',
            color: 'white',
            padding: '4px 8px',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '11px',
            marginTop: '8px'
          }}
        >
          –ó–∞–∫—Ä—ã—Ç—å
        </button>
      </div>
    );
  };

  return (
    <Layout active="calendar">
      <div className="calendar-page">
        <aside className="calendar-left">
          <h1 className="calendar-title">
            <Calendar className="inline-block w-6 h-6 mr-2" />
            {t('calendarPage.title')}
          </h1>
          <button 
            className="calendar-booking-btn" 
            onClick={() => {
              console.log('üìÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', participants.length);
              setModalOpen(true);
            }}
            disabled={loading}
          >
            {loading ? t('common.loading') : t('calendarPage.book')}
          </button>

          <div className="calendar-datepicker centered">
            <div className="calendar-header">
              <button 
                onClick={() => changeMonth(-1)} 
                className="month-btn"
                disabled={loading}
              >
                <ChevronLeft size={24} />
              </button>
              <span className="month-label">
                {format(miniCalendarDate, 'LLLL yyyy', { locale: (lang.startsWith('en') ? enUS : ru) })}
              </span>
              <button 
                onClick={() => changeMonth(1)} 
                className="month-btn"
                disabled={loading}
              >
                <ChevronRight size={24} />
              </button>
            </div>
            
            <table>
              <thead>
                <tr>
                  {weekdaysShort.map((d: string) => (
                    <th key={d}>{d}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {Array.from({ length: totalCells / 7 }).map((_, r) =>
                  <tr key={r}>
                    {cells.slice(r * 7, (r + 1) * 7).map((c, i) => {
                      const isToday = isSameDay(c.date, new Date())
                      return (
                        <td key={i} className={`${isToday ? 'today-cell' : ''}`}>
                          <div className={`day-cell ${c.inMonth ? '' : 'faded'}`}>
                            <span>{c.date.getDate()}</span>
                            <div className="dots">
                              {c.dots.map((event, di) => 
                                <span 
                                  key={di} 
                                  className="dot" 
                                  style={{ backgroundColor: event.color || 'blue' }} 
                                />
                              )}
                            </div>
                          </div>
                        </td>
                      )
                    })}
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          <div className="nearest-events">
            <h3>
              <Clock className="inline-block w-4 h-4 mr-2" />
              {t('calendarPage.nearestTitle')}
            </h3>
            {loading ? (
              <p>{t('common.loading')}</p>
            ) : nearestEvents.length === 0 ? (
              <p>{t('calendarPage.noEventsToday')}</p>
            ) : (
              nearestEvents.map((event, idx) => (
                <div key={event.id || idx} className="event-item">
                  <strong>{event.title}</strong><br />
                  <span>
                    <MapPin className="inline-block w-3 h-3 mr-1" />
                    {event.place}
                  </span><br />
                  <span>
                    <Clock className="inline-block w-3 h-3 mr-1" />
                    {format(parseISO(event.start), 'HH:mm')} - {format(parseISO(event.end), 'HH:mm')}
                  </span>
                </div>
              ))
            )}
          </div>
        </aside>

        <main className="calendar-right">
          <div className="calendar-header-bar">
            <h2>{t('calendarPage.headerTitle')}</h2>
            <div style={{ display: 'flex', gap: '10px' }}>

              <span style={{ fontSize: '14px', color: '#666', alignSelf: 'center' }}>
                {t('calendarPage.eventsCount')}: {events.length}
              </span>
            </div>
          </div>
          <FullCalendar
            ref={calendarRef}
            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}
            initialView="dayGridMonth"
            timeZone="local" // ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–£ –°–¢–†–û–ö–£
            headerToolbar={{
              left: 'prev,next today',
              center: 'title',
              right: 'dayGridMonth,timeGridWeek,timeGridDay'
            }}
            events={events.map(e => ({ ...e, id: String(e.id) }))} // id –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
            eventDidMount={(info) => {
              console.log('–°–æ–±—ã—Ç–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ:', info.event.title, info.event.start);
            }}
            dateClick={handleDateClick}
            locale={i18n.language === 'kz' ? 'kk' : i18n.language}
            height="auto"
            loading={(isLoading) => setLoading(isLoading)} // —Ñ—É–Ω–∫—Ü–∏—è –≤–º–µ—Å—Ç–æ boolean
            eventDisplay="block"
            displayEventTime={true}
            eventTimeFormat={{
              hour: '2-digit',
              minute: '2-digit',
              meridiem: false
            }}
          />

        </main>

        {modalOpen && (
          <div className="modal-overlay">
            <div className="modal">
              <div className="form-group">
                <label>
                  <Calendar className="inline-block w-4 h-4 mr-2" />
                  {t('calendarPage.form.title')} *
                </label>
                <input
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏"
                  value={eventTitle}
                  onChange={(e) => setEventTitle(e.target.value)}
                  disabled={loading}
                  maxLength={200}
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>{t('calendarPage.form.date')}</label>
                  <input 
                    type="date" 
                    value={newEvent.start} 
                    onChange={(e) => setNewEvent({ ...newEvent, start: e.target.value })}
                    disabled={loading}
                  />
                </div>
                <div className="form-group">
                  <label>
                    <Clock className="inline-block w-4 h-4 mr-2" />
                    {t('calendarPage.form.startTime')}
                  </label>
                  <input 
                    type="time" 
                    value={eventStart} 
                    onChange={(e) => setEventStart(e.target.value)}
                    disabled={loading}
                  />
                </div>
                <div className="form-group">
                  <label>
                    <Clock className="inline-block w-4 h-4 mr-2" />
                    {t('calendarPage.form.endTime')}
                  </label>
                  <input 
                    type="time" 
                    value={eventEnd} 
                    onChange={(e) => setEventEnd(e.target.value)}
                    disabled={loading}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>{t('calendarPage.form.color')} *</label>
                  <select 
                    value={eventColor} 
                    onChange={(e) => setEventColor(e.target.value)}
                    disabled={loading}
                  >
                    <option value="blue">{t('calendarPage.form.colors.blue')}</option>
                    <option value="green">{t('calendarPage.form.colors.green')}</option>
                    <option value="yellow">{t('calendarPage.form.colors.yellow')}</option>
                    <option value="red">{t('calendarPage.form.colors.red')}</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>–ö–æ—Ä–ø—É—Å *</label>
                  <select 
                    value={eventCampus || ''}
                    onChange={(e) => {
                      console.log('üè¢ –í—ã–±—Ä–∞–Ω –∫–æ—Ä–ø—É—Å:', e.target.value);
                      const campusId = e.target.value ? parseInt(e.target.value) : null;
                      setEventCampus(campusId);
                      setEventLocation(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ—Ä–ø—É—Å–∞
                    }}
                    disabled={loading}
                  >
                    <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å --</option>
                    {campuses.map(campus => 
                      <option key={campus.id} value={campus.id}>{campus.name}</option>
                    )}
                  </select>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>
                    <MapPin className="inline-block w-4 h-4 mr-2" />
                    –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ *
                  </label>
                  <select 
                    value={eventLocation || ''}
                    onChange={(e) => {
                      console.log('üè¢ –í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç–æ:', e.target.value);
                      setEventLocation(e.target.value ? parseInt(e.target.value) : null);
                    }}
                    disabled={loading}
                  >
                    <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ --</option>
                    {locations.map(location => 
                      <option key={location.id} value={location.id}>
                        {location.name}
                      </option>
                    )}
                  </select>
                  {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>
                    <div>–í—Å–µ–≥–æ –º–µ—Å—Ç: {locations.length}</div>
                    <div>–í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç–æ: {eventLocation || '–Ω–µ—Ç'}</div>
                  </div>
                </div>
              </div>

              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏</label>
                <textarea
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                  value={eventDescription}
                  onChange={(e) => setEventDescription(e.target.value)}
                  disabled={loading}
                  rows={3}
                  className="w-full p-2 border rounded"
                />
              </div>

              <div className="toggle-container">
                <label>{t('calendarPage.form.isOnline')}</label>
                <div className="toggle-switch">
                  <input
                    type="checkbox"
                    id="online-toggle"
                    checked={isOnline}
                    onChange={() => setIsOnline(!isOnline)}
                    disabled={loading}
                  />
                  <label htmlFor="online-toggle" className="slider"></label>
                </div>
              </div>

              {isOnline && (
                <>
                  <div className="form-group">
                    <label>{t('calendarPage.form.link')} *</label>
                    <input
                      type="url"
                      placeholder="https://meet.google.com/..."
                      value={eventLink}
                      onChange={(e) => setEventLink(e.target.value)}
                      disabled={loading}
                      maxLength={200}
                    />
                  </div>

                  {ParticipantsDropdown()}
                </>
              )}

              <div className="modal-actions">
                <button 
                  className="add-btn" 
                  onClick={handleAdd}
                  disabled={loading}
                  style={{ 
                    opacity: loading ? 0.6 : 1,
                    cursor: loading ? 'not-allowed' : 'pointer'
                  }}
                >
                  {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É'}
                </button>
                <button 
                  className="cancel-btn" 
                  onClick={handleCloseModal}
                  disabled={loading}
                  style={{ 
                    opacity: loading ? 0.6 : 1,
                    cursor: loading ? 'not-allowed' : 'pointer'
                  }}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Enhanced Toast */}
        {toast && (
          <div
            className={`fixed bottom-6 right-6 z-50 px-6 py-4 rounded-2xl shadow-2xl text-white font-semibold min-w-[300px] animate-[slideIn_0.3s_ease-out] ${
              toast.type === 'error'
                ? 'bg-gradient-to-r from-red-500 to-pink-600'
                : 'bg-gradient-to-r from-green-500 to-emerald-600'
            }`}
          >
            <div className="flex items-center gap-3">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center bg-white/20`}>
                {toast.type === 'error' ? (
                  <span className="text-xl">‚ö†Ô∏è</span>
                ) : (
                  <span className="text-xl">‚úÖ</span>
                )}
              </div>
              <span>{toast.message}</span>
              <button
                onClick={() => setToast(null)}
                className="ml-3 w-8 h-8 rounded-full bg-white/20 hover:bg-white/30 flex items-center justify-center transition-colors"
                aria-label="Close notification"
              >
                ‚úï
              </button>
            </div>
          </div>
        )}

        {/* Toast animation keyframes */}
        <style jsx global>{`
          @keyframes slideIn {
            from { transform: translateY(16px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
          }
        `}</style>

        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞ */}
        <AdminChangesIndicator />
      </div>
    </Layout>
  )
}
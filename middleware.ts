import { NextRequest, NextResponse } from 'next/server';

// Public paths that do NOT require auth
const PUBLIC_PATHS: RegExp[] = [
  /^\/login(?:\/.*)?$/,
  /^\/public(?:\/.*)?$/,
  /^\/locales(?:\/.*)?$/,
  /^\/_next(?:\/.*)?$/,
  /^\/favicon\.ico$/,
  /^\/images(?:\/.*)?$/,
  /^\/api\/public(?:\/.*)?$/,
  /^\/api\/auth(?:\/.*)?$/,
];

export function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl;
  
  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  console.log('üö´ AUTH DISABLED: Allowing access to:', pathname);
  return NextResponse.next();
  
  // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:
  /*
  const isPublic = PUBLIC_PATHS.some((re) => re.test(pathname));
  const authCookie = req.cookies.get('auth')?.value;
  
  // Debug logging for API calendar routes
  if (pathname.startsWith('/api/calendar')) {
    console.log(' === MIDDLEWARE DEBUG ===');
    console.log(' Path:', pathname);
    console.log('üîç Is public:', isPublic);
    console.log('üîç Auth cookie exists:', !!authCookie);
    console.log(' Auth cookie value:', authCookie?.substring(0, 20) + '...');
    console.log('üîç All cookies:', req.cookies.getAll().map(c => `${c.name}=${c.value?.substring(0, 20)}...`));
  }

  // If user is authenticated and tries to visit /login, redirect to home
  if (authCookie && /^\/login(?:\/.*)?$/.test(pathname)) {
    const url = req.nextUrl.clone();
    url.pathname = '/main/news';
    return NextResponse.redirect(url);
  }

  if (isPublic) {
    console.log('‚úÖ Public path, allowing access to:', pathname);
    return NextResponse.next();
  }

  if (!authCookie) {
    console.log('‚ùå No auth cookie found for:', pathname);
    // For API requests, return 403 instead of redirecting
    if (pathname.startsWith('/api')) {
      console.log('‚ùå Blocking API request due to missing auth cookie');
      return new NextResponse('Forbidden', { status: 403 });
    }

    // Redirect unauthenticated users to /login
    const url = req.nextUrl.clone();
    url.pathname = '/login';
    // preserve intended destination
    url.searchParams.set('next', pathname);
    return NextResponse.redirect(url);
  }

  console.log('‚úÖ Auth cookie found, allowing access to:', pathname);
  return NextResponse.next();
  */
}

export const config = {
  matcher: ['/((?!_next/static|_next/image|favicon.ico).*)'],
};


